---
layout: post
title: Proyecto
date:   2016-07-18 13:52:50 -0430
categories: jekyll update
permalink: /proyecto/
---

 ***1. Propósito***

El siguiente proyecto busca presentar una guía ilustrada que sirva como base de inicio en ReactNative, determinando las características del framework a través de la elaboración de una aplicación móvil personalizada a un sitio de comida rápida para introducir la implementación en ReactNative de componentes generales como el SideMenu, Tabs, ScrollView, Navigator, entre otros. 

La aplicación antes mencionada consta de las siguientes pantallas:
 
 - Pantalla de presentación de categorías
 - Pantalla de Lista de platos
 - Pantalla de Detalle del Plato
 - Pantalla de Ubicación (Utilizando el API de Geolocalización)
 - Pantalla de Detalle de Ubicación
 - Pantalla de Contacto
 - Pantalla para Contactar
 - Pantalla de Información
 - Splash para el inicio de la aplicación
  
***2. Estructura***
<br>
*<Text style="text-decoration: underline; margin: 15px;"> 2.1. Patrón de diseño Model View View-Model (MVVM)</Text>*
<br>

Las aplicaciones elaboradas con ReactNative tienden a seguir el patrón de diseño MVVM ya que ofrece facilidades al utilizar bindings en la vista y al manejar los estados de las pantallas, este consta de las siguientes capas:

+ Vista (View): Es la capa principal para la implementación de la presentación de la aplicación.
+ Modelo (Model): Es la capa que representa el dominio de los datos y las reglas de acceso y actualizaciones de estos datos. 
+ Vista-Modelo (View-Model): Son componentes que funcionan como controladores entre las vistas y el modelo que se encargan de implementar el comportamiento de la vista para responder a las acciones del usuario y de exponer los datos del modelo.

<p> </p>

<img style="display: block;
    margin-left: auto;
    margin-right: auto;" src="http://eppisapia.github.io/pas-restaurant-react-native/Images/MVVM.png">

<br>
<br>
*<Text style="text-decoration: underline; margin: 15px;">2.2. Diseño de la aplicación</Text>*
<br>

<table style="width:100%">
  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_menu.png"> </td>
    <td>
      Vista del Menú
      <br>
      <br>
      Todas las pantallas contendran un panel estático principal que tendrá el botón que accionara el menu o el retorno, seguido del titulo de la pantalla en la que se encuentre el usuario. 
      <br>
      <br>
      El menú a utilizar será un SideMenu o DrawerMenu que se deslizara de izquierda a derecha en la pantalla mostrando las opciones de navegación.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_categorias.png"> </td>
    <td>
      Pantalla de Presentación de Categorías
      <br>
      <br>
      Será la pagina principal de la aplicación correspondiente al Menú, tendrá una imagen de fondo con 5 botones que representen las categorías del restaurante. 
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_platos.png"> </td>
    <td>
      Pantalla de Lista de Platos 
      <br>
      <br>
      Consta de un navegador por tabs para la selección de las categorías y un ListView para mostrar la lista de platos.
      <br>
      Cada plato será almacenado en un contenedor que mostrara el Nombre, imagen, precio y ranking del platillo. Adicionalmente se colocara un Burger menú como submenú de acciones. 
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_detalle_p.png"> </td>
    <td>
      Pantalla de Detalle del Plato
      <br>
      <br>
      En esta vista, se deshabilitara el menú general y se cambiara el header por uno que contenga un botón de retorno y el titulo de la pagina.
      <br>
      Se mostrara una pantalla con el Nombre, imagen, precio, descripción, ranking del plato y tres botones que permitan al usuario realizar acciones.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_informacion.png"> </td>
    <td>
      Pantalla de Información
      <br>
      <br>
      Mostrara una imagen donde se puede colocar el logo o publicidad del sitio de comida rápida.
      <br>
      Seguido por un acordeón, que contendrá la reseña del lugar y las zonas en donde se dispone un local.
      <br>
      Se elaborara un contenedor que mostrara el nombre de la zona, hora de cierre y un botón para acceder a la ubicación del local respectivo.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_ubicacion.png"> </td>
    <td>
      Pantalla de Ubicación
      <br>
      <br>
      Consta de un mapa que abarca la pantalla en el cual se marcaran las sedes y se mostrara un mensaje para guiar al usuario en su siguiente acción.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_comollegar.png"> </td>
    <td>
      Pantalla de Detalle de Ubicación
      <br>
      <br>
      En esta vista, se deshabilitara el menú general y se cambiara el header por uno que contenga un general de retorno y el titulo de la pagina.
      <br>
      Contendrá un pequeño mapa que marque la ubicación seguido de la dirección y contacto del local.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_contacto.png"> </td>
    <td>
      Pantalla de Contacto
      <br>
      <br>
      Tendrá un contenedor fijo que mostrara la información de contacto de la sede principal, nombre del gerente, teléfono fijo y móvil, junto a un botón para poder contactar con el gerente.
      <br>
      Seguido por un ComboBox que contendrá las zonas donde hay locales y al seleccionar una se cargara el contenedor de contacto con la información respectiva.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_contactar.png"> </td>
    <td>
      Pantalla para Contactar
      <br>
      <br>
      En esta vista, se deshabilitara el menú general y se cambiara el header por uno que contenga un dirección de retorno y el titulo de la pagina.
      <br>
      Se mostrara un formulario donde el usuario introducirá su nombre, correo electrónico y el cuerpo del mensaje a enviar.
    </td>
  </tr>

  <tr>
    <td><img height="350" width="400" src="eppisapia.github.io/pas-restaurant-react-native/Images/Pantalla_inicio.png"> </td>
    <td>
      Splash para el inicio de la aplicación
      <br>
      <br>
      Se mostrara el logo del sitio de comida hasta que finalice la carga y renderización de la pantalla principal de la aplicación, Pantalla de lista de platos.
    </td>
  </tr>
</table>
 

<br>
<br>

 ***3. Implementación del Proyecto***

A continuación se presentara el desarrollo de las vistas anteriormente mostradas denotando las librerías utilizadas y su uso.

Puntos a considerar:

- Se explicara el uso de los componentes y, en algunos casos, los props que recibe.
- Como el objetivo es aprender a utilizar el framework se implementaran los componentes y funcionalidades de varias maneras denotando sus ventajas.
- Instalación de las librerías NPM que se utilizaran.
- Se trabajara con variables que contengan la información de la aplicación, es decir, no se desarrollara el Modelo.
- El diseño de la aplicación esta disponible en el repositorio git por lo que no será explicado.

<br>
<br>
*<Text style="text-decoration: underline; margin: 15px;"> Librerias que se utilizaron </Text>*
<br>
<br>

a) [react-native-collapsible](https://github.com/oblador/react-native-collapsible): Proporciona el uso del componente Accordion para su uso es necesario pasarle el valor a los siguientes props:

<div style="margin-left: 45px;">
- sections: Variable que contiene la información del Accordion.
<br>
- renderHeader: Función para renderizar la cabecera.
<br>
- renderContent: Función para renderizar el contenido de una cabecera.

</div>

```
<Accordion
  sections={SECTIONS}
  renderHeader={this._renderHeader}
  renderContent={this._renderContent} />
```

También requerimos de una función para retornar la(s) cabecera(s), y otra para mostrar el contenido de estas. Sin embargo, no siempre se desea mostrar el mismo formato entre las cabeceras o el contenido por lo que se utiliza un variable constante que tenga la información del Accordion.

Uso general:

```
import Accordion from 'react-native-collapsible/Accordion';


const SECTIONS = [
  {
    title: 'Header_1',
    content: {Componente},
  },
  {
    title: 'Header2',
    content: {Componente},
  }
];

export default class About extends Component {
  
  _renderHeader(section, index, isActive) {
    return (
      <Text>{section.title}</Text>
    );
  }

  _renderContent(section) {
    return (
      {section.content}
    );
  }

  render() {
    return (
      <Accordion
        sections={SECTIONS}
        renderHeader={this._renderHeader}
        renderContent={this._renderContent} />
    );
  }
}
```

Vemos que las funciones reciben parámetros, estos son manejados internamente por el estado del componente donde:

<div style="margin-left: 45px;">
  - section: Variable con información.
  <br>
  - index: Posición de la sección del acordeón (parecido al row).
  <br>
  - isActive: Valor booleano que indica la apertura o cierre de una sección del Acordeón.
</div>

<br>
<br>

b) [react-native-drawer](https://github.com/root-two/react-native-drawer): Facilita la implementación de un DrawerMenu funcional en ambas plataformas (iOS, Android) por medio del componente Drawer. Este componente consta de 2 partes, el contenido que va dentro de las etiquetas es lo que se muestra en la pantalla, mientras que el componente declarado en la propiedad "content" es el que se muestra en el drawer. Requiere la declaración de los estados Open y Disabled para el control de este y de las funciones para abrirlo y cerrarlo. Entre sus props tenemos:

<div style="margin-left: 45px;">
- type: Puede tomar dos valores, "static" el Drawer se pinta en la pantalla deslizando el contenido de esta hacia la derecha. Y "overlay", se pinta encima del contenido de la pantalla.
<br>
- content: Aquí se declara el contenido que se mostrara en el drawer.
<br>
- onOpen: Función a ejecutar en la apertura del Drawer.
<br>
- onClose: Función a ejecutar al cerrar el Drawer.
</div>
<br>

Uso general:

```
import Drawer from 'react-native-drawer';

class MenuBar extends Component {
 constructor(props){
    super(props);
    this.state={
      drawerOpen: false,
      drawerDisabled: false,
    }
  }

  closeDrawer = () => {
    this._drawer.close()
  }

  openDrawer = () => {
    this._drawer.open()
  }

  render() {
    return (
        <Drawer
          ref={(ref) => this._drawer = ref}
          type="overlay"
          content={
            {/*Contenido del Drawer*/}
          }
          onOpen={() => {
            this.setState({drawerOpen: true})
          }}
          onClose={() => {
            this.setState({drawerOpen: false})
          }}
          disabled={this.state.drawerDisabled}
          >
            {/* Contenido que se muestra en pantalla*/}
        </Drawer>
    );
  }
}
```

c. [react-native-maps](https://github.com/lelandrichardson/react-native-maps): Libreria que nos permite implementar el componente MapView en ambas plataformas y conectarlo a los servicios del API Google Maps.

Mostraremos el uso general de un mapa que permita al usuario movilizar la region que esta mostrando para lo cual es necesario instanciar el componente colocando en el estado la region y mandar a actualizar el estado cuando el mapa detecte que se quiere cambiar la region. Tambien, ofrece funcionalidades para interactuar con el mapa, por ejemplo, el MapView.Marker que nos permite colocar una marca perzonalizada en el mapa en las coordenadas que reciba.

Uso general:

```
import MapView from 'react-native-maps';

class Location extends Component {

  constructor(props){
      super(props);
      this.state={
        region: {
                latitude: 10.498086655450642,
                longitude: -66.85348734185897,
                latitudeDelta: 0.70,
                longitudeDelta: 0.70,
              }
      }
  }

  render() {
  return (
    <MapView
    region={this.state.region}
    onRegionChange={(region)=> this.setState({region})} >

      <MapView.Marker
      coordinate={coordenadas (latitud y longitud)}
      image={requite(_ruta_de_la_imagen)}/>

       <MapView.Marker
      coordinate={coordenadas (latitud y longitud)}
      image={requite(_ruta_de_la_imagen)}/>

    </MapView>
    );
  }
}
```
<br>
d. [react-native-menu](https://www.npmjs.com/package/react-native-menu): Al instalar esta libreria podremos utilizar sus componentes:

<div style="margin-left: 45px;">
- Menu: Componente Menu donde se contienen las demás etiquetas.
<br>
- MenuContext: Permite establecer el contexto en el cual se sobrepondrá el menú.
<br>
- MenuOptions: Contenedor de las opciones del menú.
<br>
- MenuOption: Opción del menú. 
<br>
- MenuTrigger: Disparador que renderiza el menú.
</div>
<br>

```
import Menu, { MenuContext, MenuOptions, MenuOption, MenuTrigger } from 'react-native-menu';

{/* ... */}
<MenuContext>
  {/* ... */}
  <Menu style={styles.img_menu} onSelect={(value) => /*Funcion a ejecutar*/}>
    
    <MenuTrigger style={styles.img_menu}>
      {/* Componente que representa el icono del menú */}
    </MenuTrigger>

    <MenuOptions optionsContainerStyle={/*Estilo del contenedor de la opción*/}>
      
      <MenuOption  value={/*Valor de la opción*/}>
          {/* Componente a mostrar en la opción*/}
      </>
      <MenuOption value={/*Valor de la opción*/}>
        {/* Componente a mostrar en la opción */}
      </MenuOption>

    </MenuOptions>
  </Menu> 
  {/* ... */}
</MenuContext>
```
<br>
e. [react-native-router-flux](https://github.com/aksonov/react-native-router-flux): Esta librería nos permitirá utilizar sus componentes Router y Scene, donde cada escena representa una pantalla que será renderizada sobre el componente actual trazando una ruta de navegación. 

Uso general:

```
import { Router, Scene } from 'react-native-router-flux';

class LosGorditosPlus extends Component {
  render() {
    return (
      <Router>
        <Scene key="root" hideNavBar>
          <Scene key="_NombreDeAcceso" component={/*Componente a renderizar*/} initial={true} />
        </Scene>
      </Router>
    )
  }
}
```
<div style="margin-left: 45px;">
- key: String único que sirve para referenciar la escena. Al pasarle como valor "root" indicamos que es raíz de las escenas.
<br>
- hideNavBar: Oculta la barra de navegación de Flux.
<br>
- component: Componente a ser renderizado en la escena o pagina.
<br>
- initial: Indica que es la primera escena a mostrar al ejecutar la aplicación.
</div>
<br>

Si queremos acceder a las acciones de Flux debemos importar el elemento Actions en las pantallas donde se utilizara.

```
import { Actions } from 'react-native-router-flux';
```
<div style="margin-left: 45px;">
- Actions.refresh(params): Actualiza los props desde la escena raiz.
<br>
- Actions._NombreDeAcceso(params): Invoca la escena "_NombreDeAcceso" con los props definidos en el params.
<br>
- Actions.prop(): Deshace la ultima acción flux.
</div>
<br>

f. [react-native-tab-navigator](https://github.com/exponentjs/react-native-tab-navigator): Nos permite utilizar el TabNavigator en este componente tendremos dos etiquetas principales <TabNavigator> que es el contenedor de los tabs y <TabNavigator.Item> que son los tab per se y contenedor del componente a mostrar, ademas contiene props que facilitan la funcionalidad del tab como:

<div style="margin-left: 45px;">
- selected: Es un valor booleano que activa el tab cuando esta seleccionado, asociaremos una igualdad con el valor que pasamos "selected_tab" para activar el tab respectivo.
<br>
- renderIcon: Icono que tendra el tab cuando esta inactivo.
<br>
- renderSelectedIcon: Icono que tendra el tab cuando esta activo.
</div>
<br>
Uso general:

```
import TabNavigator from 'react-native-tab-navigator';

class TabMenuList extends Component {
  render() {
    return (
      <TabNavigator>
        <TabNavigator.Item
          selected={Valor_Booleano}
          renderIcon={() => /*Componente a mostrar como icono*/}
          renderSelectedIcon={() => /*Componente a mostrar como icono cuando el tab este seleccionado*/}
          >
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>

        <TabNavigator.Item
          selected={Valor_Booleano}
          renderIcon={() => /*Componente a mostrar como icono*/}
          renderSelectedIcon={() => /*Componente a mostrar como icono cuando el tab este seleccionado*/}
          >
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>
      </TabNavigator>
    );
  }
}
```

g. [ReactNative ListView](https://facebook.github.io/react-native/docs/listview.html): Es un componente propio de react native que se necesita instanciar en el estado el valor del dataSource con un cloneWithRows del array que contiene la información esto seccionara la información por filas.

Requiere de una función que retorne el componente a pintar en cada fila de la lista (renderRow) al cual se le pasa la información de una fila.

Para que el scroll del ListView funcione se debe colocar una altura al componente, además, agregar un componente vacío que ocupe espacio al final de la lista para que nos permita visualizar el ultimo renderizado.

Uso general

```
import {ListView} from 'react-native';

class MenuList extends Component {
  
  constructor(props) {
        super(props);

        var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});

        this.state= {
            dataSource: ds.cloneWithRows(this.props.fake_data)
        };
    }

  renderRow(data){
    return (
      <Text> Contenido de la fila </Text>
      );
  }

  render() { 
    return (
      <ListView
        dataSource={this.state.dataSource}
        renderRow={(data) => this.renderRow(data)}/>
    );
  }
}
```

h. Libreria para el estilo de la aplicacion, [Dimensions](https://facebook.github.io/react-native/docs/dimensions.html): Nos permite obtener las dimensiones de la pantalla del dispositivo. Observacion: Presenta errores al tomar las dimensiones de la pantalla en la plataforma Android, se puede solventar con el uso de Flex o estableciendo un codigo especifico para la plataforma [Platform Specific Code](https://facebook.github.io/react-native/docs/platform-specific-code.html).

Uso General:

```
import { Dimensions } from 'react-native';

const W_height = Dimensions.get('window').height;
const W_width = Dimensions.get('window').width;
```

i. [@remobile/react-native-splashscreen](https://github.com/remobile/react-native-splashscreen): Libreria que manipula el tamaño de la imagen para mostrar el splash. En el desarrollo del splash se indicara como se utiliza.

*Pueden descargar la app del repositorio:* [Synergy-GB React Native](https://github.com/SYNERGY-GB/pas-restaurant-react-native) 

-----------------------------------------------------------------------------------------
<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.1. Inicio e Implementación de la librería Flux</Text>*
<br>
<br>

Comenzamos creando la aplicación que se llamara LosGorditosPlus


```
  react-native init LosGorditosPlus
```

Utilizaremos la estructura que otorga Facebook en sus ejemplos de ReactNative, tendremos una carpeta app que contenga los componentes de la aplicación con sus respectivos estilos y recursos.


```
  cd LosGorditosPlus
  mkdir app
  mkdir app/components
  mkdir app/components/resources
  mkdir app/components/styles
```

Comenzaremos creando el componente principal de nuestra aplicación, el menú de navegación.

```
#Vista del menú

touch app/components/MenuBar.js
```

Ahora en el index importaremos la libreria [react-native-router-flux](https://github.com/aksonov/react-native-router-flux) para implementar las rutas y colocar la escena que invoque al componente MenuBar.js

```
import React, { Component } from 'react';
import { Router, Scene } from 'react-native-router-flux';
import {
  AppRegistry
} from 'react-native';
import MenuBar from './app/components/MenuBar';

export default class LosGorditosPlus extends Component {
  render() {
    return (
      <Router>
        <Scene key="root" hideNavBar>
          <Scene key="MenuBar" component={MenuBar} initial={true} />
        </Scene>
      </Router>
    )
  }
}

AppRegistry.registerComponent('LosGorditosPlus', () => LosGorditosPlus);
```

Por ahora tenemos que al iniciar la aplicación se renderiza el componente Menubar.


-----------------------------------------------------------------------------------------
<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.2. Desarrollo del Menú </Text>*
<br>
<br>
Se quiere tener un menú que se despliegue del lado izquierdo de la aplicación que contenga cuatro opciones para la navegación Menú, Información, Ubicación y Contacto.

Creamos las pantallas a las cuales se accederán desde el menú

```
# Pantalla de Presentacion de Categorias del Menú

  touch app/components/MenuView.js

# Pantalla de Lista de Platos.

  touch app/components/TabMenuList.js

# Pantalla de Información

  touch app/components/About.js

# Pantalla de Ubicación

  touch app/components/Location.js

# Pantalla de Contacto
  touch app/components/Contact.js
```

Podemos colocar en cada uno de estos archivos un pequeño código que nos permita visualizar la funcionalidad de nuestro menú al cambiar la pantalla

```
class <Nombre_Clase> extend Component {
	render (){
	return (
		<Text>Nombre del archivo</Text>
	);
	}
}

module.exports= <Nombre_Clase>
```


Empezamos la implementación del menú necesitamos importar la librería (React-Native-Drawer)[https://github.com/root-two/react-native-drawer] y cada una de las pantallas que serán llamadas desde el menú.

```
import TabMenuList from './TabMenuList';
import MenuView from './MenuView';
import Location from './Location';
import About from './About';
import Contact from './Contact';
import Drawer from 'react-native-drawer';
import styles from './styles/MenuBar_style';

class MenuBar extend Component {
	render (){
	return (
		<Text>Nombre del archivo</Text>
	);
	}
}

module.exports= MenuBar
```

Usaremos el componente Image como contenedor para colocar la imagen de fondo y sobreponer componentes en esta.


Desglosaremos el contenido del Drawer en un archivo llamado DrawerContent para que el código sea mas legible. Creamos en la carpeta components el archivo DrawerContent.js

```
touch app/components/DrawerContent.js
```

Regresamos a la clase MenuBar e importamos el contenido del Drawer

```
import DrawerContent from './DrawerContent';
```

Nuestra clase manejara los siguientes props:

- bg: Establece la dirección de la imagen de fondo 
- ts: Establece el estilo que tendrá el titulo de la pantalla
- selected_page: Valor numérico con el cual se selecciona el componente a renderizar
- page_title: Titulo de la pantalla
- selectedTab: Valor numérico que indica la categoría Tab seleccionada

Primero, haremos la seccion que se muestra en la pantalla esta sera una barra de Navegación que tendrá el botón para acceder abrir el drawer o acceder al menú de la aplicación (Drawer) seguido del titulo de la pantalla en la cual nos encontramos por lo que mostrara el valor del prop "page_title". Bajo la barra de navegación colocaremos el componente a invocar.

No utilizaremos Flux para la navegación de las paginas principales de la aplicación sino que lo haremos por medio de un switch que evalúe el prop "selected_page" para renderizar el componente correspondiente a su valor, esto nos permite que se sustituya el componente que se muestra en pantalla en lugar de sobreponer una escena.

Por ultimo, establecemos el contenido del Drawer invocando al componente DrawerContent con los props onClose, función para cerrar el drawer, y selected_page, para manejar el indicador interno del menu.

```
#Vista del Menu

'use strict';
import React, { Component } from 'react';
import {
  TouchableOpacity,
  Text,
  View,
  Image
} from 'react-native';
import TabMenuList from './TabMenuList';
import MenuView from './MenuView';
import Location from './Location';
import About from './About';
import Contact from './Contact';
import DrawerContent from './DrawerContent';
import Drawer from 'react-native-drawer';
import styles from './styles/MenuBar_style';

class MenuBar extends Component {

 constructor(props){
    super(props);
    this.state={
      drawerOpen: false,
      drawerDisabled: false,
    }
  }

  # Funcion para cerrar el drawer Menu
  closeDrawer = () => {
    this._drawer.close()
  }

  # Funcion para abrir el drawer menu
  openDrawer = () => {
    this._drawer.open()
  }

  render() {
    var bg = this.props.bg ? require('./resources/6_BG/bg2.png') : require('./resources/6_BG/bg.png');
    var title_style = this.props.ts ? styles.container_title : styles.container_title_b 
    return (
      <Image style={styles.bg} source={bg} >
        <Drawer
          ref={(ref) => this._drawer = ref}
          type="overlay"
          content={
            <DrawerContent onClose={this.closeDrawer} selected_page={this.props.selected_page} />
          }
          acceptDoubleTap
          onOpen={() => {
            this.setState({drawerOpen: true})
          }}
          onClose={() => {
            this.setState({drawerOpen: false})
          }}
          captureGestures={false}
          tweenDuration={200}
          panThreshold={0.50}
          disabled={this.state.drawerDisabled}
          openDrawerOffset={(viewport) => {
            return 100
          }}
          closedDrawerOffset={() => 0}
          panOpenMask={0.2}
          negotiatePan
          >

            <View style={title_style} >
                <TouchableOpacity style={styles.menu_icon} onPress={()=>{
                  this._drawer.open()
                }}>
                  <Image style={styles.menu_icon} source={require('./resources/1_Icons/recursos-01.png')} />
                </TouchableOpacity>
                <Text style={styles.page_title}> {this.props.page_title} </Text>       
            </View>


            { () => {
              switch (this.props.selected_page) {
                case 0: return <MenuView />;
                case 1: return <About />;
                case 2: return <Contact />;
                case 3: return <Location/>;
                case 4: return <TabMenuList />
                default: return <MenuView />;
              }
            })()}
        </Drawer>
      </Image>
    );
  }
}
```

Con esto ya tenemos nuestro componente principal MenuBar, el cual se encarga de mostrar el menú de navegación de la aplicación y renderizar las pantallas, como es el componente padre al refrescar con la acción Flux se actualizara y volverá a evaluar sus props cambiando el titulo de la pagina o renderizando una nueva pantalla.


Pasamos a elaborar el componente DrawerContent.

Como vimos en el diseño el drawer consta de 5 botones (Opciones de Navegación y el botón del menú) junto a un indicador que se posiciona en la pagina actual para lo cual se le asignara un valor a cada Opción de Navegación, será pasado por el padre bajo el nombre de "selected_page", así podremos saber donde pintar el indicador. También, implementaremos la librería Flux para que al seleccionar una opción mandemos a refrescar el contexto utilizando la acción "Actions.refresh(PARAM)", donde pasaremos como parámetros:

- page_title: Titulo a mostrar en la barra de navegación.
- bg: Variable de control del fondo.
- ts: Variable de control del estilo de la barra de navegación.
- selected_page: Pagina seleccionada.

```
#DrawerContent

'use strict';
import React, {PropTypes, Component } from 'react';
import {
  TouchableOpacity,
  Text,
  View,
  Image
} from 'react-native';
import styles from './styles/MenuBar_style';
import { Actions } from 'react-native-router-flux';

class DrawerContent extends Component {
   static propTypes = {
    onClose: PropTypes.func,
  };
  render (){
    return(
      <Image style={styles.containerMenu} source={require('./resources/menu.png')}>
              <TouchableOpacity style={styles.menu_icon} onPress={()=>{
                this.props.onClose()
              }}>
                <Image style={styles.menu_icon} source={require('./resources/1_Icons/recursos-01.png')} />
              </TouchableOpacity>

              <TouchableOpacity style={styles.first_button} onPress={()=>{
                Actions.refresh({page_title: null, bg: false, ts: false, selected_page: 0}) ;
                this.props.onClose()
              }}>
                <View style={styles.button_align}>
                  <Image style={styles.img_buttom} source={require('./resources/1_Icons/recursos-02.png')} />
                  <Text style={styles.menu_title}> menu </Text>
                  {this.props.selected_page === 0 ? 
                    <Image style={styles.img_buttom_4} source={require('./resources/1_Icons/recursos-06.png')} />
                    : 
                    this.props.selected_page === 4 ? 
                    <Image style={styles.img_buttom_4} source={require('./resources/1_Icons/recursos-06.png')} />
                    : 
                    <Text/>}
                </View>
              </TouchableOpacity>

              <TouchableOpacity style={styles.button} onPress={()=>{
                Actions.refresh({page_title: 'información', bg: true, ts: true, selected_page: 1}) ;
                this.props.onClose()
                }}>
                <View style={styles.button_align}>
                  <Image style={styles.img_buttom} source={require('./resources/1_Icons/recursos-03.png')} />
                  <Text style={styles.menu_title}> información </Text>
                  {this.props.selected_page ===1 ? 
                    <Image style={styles.img_buttom_4} source={require('./resources/1_Icons/recursos-06.png')} />
                    : 
                    <Text/>}
                </View>
              </TouchableOpacity>

              <TouchableOpacity style={styles.button} onPress={()=>{
                Actions.refresh({page_title: 'contacto', bg: true, ts: true, selected_page: 2}) ;
                this.props.onClose()
                }}>
                <View style={styles.button_align}>
                  <Image style={styles.img_buttom_2} source={require('./resources/1_Icons/recursos-04.png')} />
                  <Text style={styles.menu_title}> contactar </Text>
                  {this.props.selected_page ===2 ? 
                    <Image style={styles.img_buttom_4} source={require('./resources/1_Icons/recursos-06.png')} />
                    : 
                    <Text/>}
                </View>
              </TouchableOpacity>

              <TouchableOpacity style={styles.button} onPress={()=>{
                Actions.refresh({page_title: 'ubicaciones', bg: true, ts: true, selected_page: 3}) ;
                this.props.onClose()
                }}>
                  <View style={styles.button_align}>
                    <Image style={styles.img_buttom_3} source={require('./resources/1_Icons/recursos-05.png')} />
                    <Text style={styles.menu_title}> ubicaciones </Text>
                    {this.props.selected_page ===3 ? 
                    <Image style={styles.img_buttom_4} source={require('./resources/1_Icons/recursos-06.png')} />
                    : 
                    <Text/>}
                  </View>
              </TouchableOpacity>
              <Image style={styles.menu_logo}source={require('./resources/3_Logos/menu_logo.png')}/>
            </Image>
    );
  }
}

module.exports = DrawerContent;
```

-------------------------------------------------------------------

<br>
<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.3. Desarrollo de la Pantalla de Presentación de Categorías</Text>*
<br>
<br>

Esta pantalla se realizara en el archivo MenuView.js, se desea mostrar 5 botones que representan las categorías de comida que maneja el sitio de comida y cuando sean presionadas se cargue el componente TabMenuList para esto mandaremos a refrescar la ruta inicial con los props:

- page_title: Titulo que se mostrara en la barra de navegación.
- bg: Variable de control para colocar el fondo de la aplicación.
- ts: Variable que controla el estilo de la barra de navegación.
- selected_page: Pagina seleccionada.
- selectedTab: Número de la categoría que fue seleccionada para marcar el tab en la siguiente pantalla.

```
import React, { Component } from 'react';
import {
  ScrollView, StyleSheet, Text, TouchableOpacity,
  View, Image,} from 'react-native';
import { Actions } from 'react-native-router-flux';
import styles from './styles/MenuView_style';

class MenuView extends Component {
  render(){
    return (
    <View style={styles.container}> 
    
      <TouchableOpacity style={styles.logo} onPress={() => Actions.refresh({page_title: 'favoritos', bg: true, ts: true, selected_page: 4, selectedTab: 0})}>
        <Image style={styles.img_logo} source={require('./resources/1_Icons/recursos-23.png')}/>
        <Text style={styles.text_logo}>favoritos</Text>
      </TouchableOpacity>
    
      <TouchableOpacity style={styles.logo} onPress={() => Actions.refresh({page_title: 'principales', bg: true, ts: true, selected_page: 4, selectedTab: 1})}>
        <Image style={styles.img_logo} source={require('./resources/1_Icons/recursos-24.png')}/>
        <Text style={styles.text_logo}>principales</Text>
      </TouchableOpacity>
      
      <TouchableOpacity style={styles.logo} onPress={() => Actions.refresh({page_title: 'ensaladas', bg: true, ts: true, selected_page: 4, selectedTab: 2})}>
        <Image style={styles.img_logo} source={require('./resources/1_Icons/recursos-25.png')}/>
        <Text style={styles.text_logo}>ensaladas</Text>
      </TouchableOpacity>
      
      <TouchableOpacity style={styles.logo} onPress={() => Actions.refresh({page_title: 'postres', bg: true, ts: true, selected_page: 4, selectedTab: 3})}>
        <Image style={styles.img_logo} source={require('./resources/1_Icons/recursos-26.png')}/>
        <Text style={styles.text_logo}>postres</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.logo} onPress={() => Actions.refresh({page_title: 'bebidas', bg: true, ts: true, selected_page: 4, selectedTab: 4})}>
        <Image style={styles.img_logo} source={require('./resources/1_Icons/recursos-27.png')}/>
        <Text style={styles.text_logo}>bebidas</Text>
      </TouchableOpacity>
    
    </View>
    );
  }
};

module.exports = MenuView;
```

Con el código anterior logramos que al presionar un botón se recargue el componente MenuBar con los props enviados como el valor del "selected_page" es igual para todos los botones siempre estaremos renderizando el componente TabMenuList, por ahora, solo cambiara el estilo de la barra de navegación, el fondo de la app y el titulo que se muestra.

Utilizaremos el props "selectedTab" para indicar a nuestro componente TabMenuList cual fue el tab seleccionado para lo cual se instancia el componente con un props con el valor del tab seleccionado.


Cambiamos en el archivo MenuBar.js:

```
{ 
  (() => {
  switch (this.props.selected_page) {
    ...
    case 4: return <TabMenuList/>
    ...         
```

Por

```
{ 
  (() => {
  switch (this.props.selected_page) {
    ...
    case 4: return <TabMenuList selectedTab={ this.props.selectedTab } />
    ...
```

--------------------------------------------------------------------------

<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.4. Desarrollo de la Pantalla de Lista de Platos</Text>*
<br>
<br> 

El desarrollo de esta pantalla lo realizaremos en el archivo TabMenuList.js, como se observa en el diseño esta pantalla tiene un navegador interno por tab que será implementado utilizando la librería [react-native-tab-navigator](https://github.com/exponentjs/react-native-tab-navigator), trabajaremos el componente que renderiza la lista de platos de comida en un archivo a parte para su reutilizacion.

Se utilizaran variables con la información a mostrar, fake_data, que representan un array que contiene la información a ser mostrada.

Primero iniciaremos con la implementacion del TabNavigator, recordemos que al utilizar este componente tendremos dos etiquetas principales <TabNavigator> que es el contenedor de los tabs y <TabNavigator.Item> que son los tab per se y contenedor del componente a mostrar, ademas contiene props que facilitan la funcionalidad del tab como:

- selected: Es un valor booleano que activa el tab cuando esta seleccionado, asociaremos una igualdad con el valor que pasamos "selected_tab" para activar el tab respectivo.
- renderIcon: Icono que tendra el tab cuando esta inactivo.
- renderSelectedIcon: Icono que tendra el tab cuando esta activo.

Adiccionalmente, colocaremos la funcion onPress para refrescar el titulo de la pagina y el tab seleccionado al presionarlo por medio de la accion Actions.refresh()


```
'use strict'; 
import React, { Component, PropTypes } from 'react';

#Importamos el TabNavigator de la libreria instalada

import TabNavigator from 'react-native-tab-navigator';
import {
  View,
  Text,
  Image
} from 'react-native';
import styles from './styles/TabStyle';
import { Actions } from 'react-native-router-flux';

class TabMenuList extends Component {
  render() {
    return (
    <View>
      <TabNavigator style={styles.container}>
        <TabNavigator.Item
          selected={this.props.selectedTab === 0}
          renderIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-18.png')} />}
          renderSelectedIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-13.png')} />}
          onPress={() => 
                    Actions.refresh({page_title: 'favoritos', selectedTab: 0})
                  }>
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>

        <TabNavigator.Item
          selected={this.props.selectedTab === 1}
          renderIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-19.png')} />}
          renderSelectedIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-14.png')} />}
          onPress={() => 
                    Actions.refresh({page_title: 'principales', selectedTab: 1})
                  }>
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>

        <TabNavigator.Item
          selected={this.props.selectedTab === 2}
          renderIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-20.png')} />}
          renderSelectedIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-15.png')} />}
          onPress={() => 
                    Actions.refresh({page_title: 'ensaladas', selectedTab: 2})
                  }
          >
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>

        <TabNavigator.Item
          selected={this.props.selectedTab === 3}
          renderIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-21.png')} />}
          renderSelectedIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-16.png')} />}
          onPress={() => 
                    Actions.refresh({page_title: 'postres', selectedTab: 3})
                  }
        >
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>

        <TabNavigator.Item
          selected={this.props.selectedTab === 4}
          renderIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-22.png')} />}
          renderSelectedIcon={() => <Image style={styles.icon} source={require('./resources/1_Icons/recursos-17.png')} />}
          onPress={() => 
                    Actions.refresh({page_title: 'bebidas', selectedTab: 4})
                }
         >
          {Aqui va el componente que muestra la lista de platos}
        </TabNavigator.Item>
      </TabNavigator>
      
    </View>
      );
  }
}

module.exports = TabMenuList;
```

Ahora que tenemos nuestra pantallas con Tabs pasaremos a elaborar el componente que muestra la lista de platos, tomaremos en cuenta que este recibira la información por el props fake_data que contendra el titulo del plato, precio, imagen, ranking y descripción del mismo.

Creamos el archivo MenuList.js

```
touch app/components/MenuList.js
```


Primero, nos encargaremos del funcionamiento de la lista utilizando el componente propio de [ReactNative ListView](https://facebook.github.io/react-native/docs/listview.html)

Una vez colocamos la implementación básica del ListView trabajamos en el contenido de cada fila queremos mostrar la Imagen del plato, nombre, precio, ranking y añadirle un dropMenu.

Como queremos que el dropMenu abarque la pantalla enceramos el componente ListView entre las etiquetas <MenuContext> y <MenuContext /> de esta manera el dropMenu se sobrepondrá en toda la lista. Haremos un menú que despliegue dos opciones, una de estas será para llamar a la escena que mostrara el detalle del plato correspondiente, usando la función del componente menú "onSelect" se evalúa la selección de una de sus opciones y ejecutara la función que establecida en el "onSelect", es necesario indicarle un valor a la etiqueta MenuOption a través del props "value", colocaríamos el siguiente código donde queremos que este nuestro dropMenu:

```
<Menu style={styles.img_menu} onSelect={(value) => /*Funcion a ejecutar*/}>
  
  <MenuTrigger style={styles.img_menu}>
    {/* Componente que representa el icono del menú */}
  </MenuTrigger>

  <MenuOptions optionsContainerStyle={/*Estilo del contenedor de la opción*/}>
    
    <MenuOption  value={/*Valor de la opción*/}>
        {/* Componente a mostrar en la opción*/}
    </>
    <MenuOption value={/*Valor de la opción*/}>
      {/* Componente a mostrar en la opción */}
    </MenuOption>

  </MenuOptions>

</Menu> 
```

Ahora que sabemos como será el dropMenu pasaremos a trabajar en la función "renderMenu" recapitulando:

- Se encarga de retornar la renderización del componente de una fila.
- Recibe en el parámetro "data" con la información de una fila que consigue del dataSource definido en el estado del componente.
- Se debe mostrar por fila la Imagen del plato, nombre, precio, ranking y añadirle un dropMenu.
- Al final de la fila se debe anexar un componente vacío.


Utilizaremos la elaboración del componente que representa la fila en la lista de platos para repasar algunos conceptos base de ReactNative


Empezaremos estableciendo el contenedor de todos los elementos que utilizaremos

```
renderMenu(data){
  return (
      <View>

      <View />
  );
}
```

El primer elemento de nuestra fila es una imagen que obtendrá su contenido de un fichero local del proyecto através del prop "source" y cerramos la imagen en la misma etiqueta para que no sea tomada como contenedor.

```
renderMenu(data){
  return (
      <View>
        <Image source={data.img} />
      <View />
  );
}
```
Seguidamente, si observamos el diseño tocaría pintar el nombre del Plato y un icono que represente el menú. 

Utilizaremos el componente <Text> para mostrar el titulo y declararemos nuestro menú como se indico previamente, utilizaremos como icono una imagen y las opciones del menú serán textos.

```
renderMenu(data){
  return (
      <View>
        <Image source={data.img} />
        <View style={{flexDirection: 'row'}}>
          <Text>{data.title}<Text />
          <Menu onSelect={(value) => this.changeView(value,data)}>
                <MenuTrigger style={styles.img_menu}>
                  <Image source={require('_Direccion_Local_de_la_Imagen_')} />
                </MenuTrigger>
                <MenuOptions optionsContainerStyle={styles.dropdownOptions}>
                  <MenuOption  value={0}>
                    <Text>Detalle</Text>
                  </MenuOption>
                  <MenuOption value={1}>
                    <Text>Pedir</Text>
                  </MenuOption>
                </MenuOptions>
              </Menu>    
        <View />
      <View />
  );
}
```
Vemos que al seleccionar una opción estamos invocando la función del MenuList "changeView" y le estamos pasando el valor de la opción y la información de la fila, mas adelante la definiremos para hacer la llamada de la escena "Detalle".

Volvemos a definir un subcontenedor para el precio y el ranking en nuestro componente supondremos que nuestra data contiene un atributo rank con la dirección de la imagen del ranking. Finalmente, anexamos la condición si data.last es true se renderiza un contenedor vacío si no que retorne el componente, además le agregamos los estilos a nuestro componente.

```
renderMenu(data){
  return (
    data.last ? <View style={styles.img}/> :
    <View style={styles.containerMenu}>
      <Image style={styles.img} source={data.img}/>
      <View style={styles.bg}>
        <View style={styles.rowStyle}>
          <Text style={styles.title}>{data.title}</Text>    
            <Menu style={styles.img_menu} onSelect={(value) => this.changeView(value,data)}>
              <MenuTrigger style={styles.img_menu}>
                <Image style={styles.img_menu} source={require('./resources/1_Icons/recursos-07.png')} />
              </MenuTrigger>
              <MenuOptions optionsContainerStyle={styles.dropdownOptions}>
                <MenuOption  value={0}>
                    <Text style={styles.dropText}>Detalle</Text>
                </MenuOption>
                <MenuOption value={1}>
                  <Text style={styles.dropText}>Pedir</Text>
                </MenuOption>
              </MenuOptions>
            </Menu>           
        </View>
        <View style={styles.rowStyle}>
          <Text style={styles.price}>{data.price}</Text>
          <Image style={styles.img_menu} source={data.rank}/>
        </View>
      </View>
    </View>
  );
}
```
Para terminar con nuestro componente MenuList nos falta definir la función changeView que recibe dos parámetros, value y data, el objetivo de esta función es hacer las acciones respectivas de navegación dependiendo del valor de la opción seleccionada en el dropMenu. Utilizaremos las acciones flux para la navegación por lo que será necesario importarlas.


```
import { Actions } from 'react-native-router-flux';
```

Definiremos la función para que llame a la escena MenuDetail cuando el usuario seleccione la opción de "detalle" (value=0) o mande al componente MenuBar a actualizar y renderizar la pantalla de Contacto.

```
changeView(value, data) {
  if (value === 0) {
    Actions.MenuDetail({plato: data})
  }
  else {
    Actions.refresh({page_title: 'contacto', selected_page: 2})
  }
}
```

Ahora, como estamos llamando a la escena MenuDetail requerimos incorporarla en nuestro Router. Repetimos los mismos paso que con la escena Menubar, creamos nuestro archivo MenuDetail.js, lo importamos en el index y definimos la escena pero esta vez sin el prop initial.

```
import React, { Component } from 'react';
import { Router, Scene } from 'react-native-router-flux';
import {AppRegistry} from 'react-native';
import MenuBar from './app/components/MenuBar';
import MenuDetail from './app/components/MenuDetail';

export default class LosGorditosPlus extends Component {
  render() {
    return (
      <Router>
        <Scene key="root" hideNavBar>
          <Scene key="MenuBar" component={MenuBar} initial={true} />
          <Scene key="MenuDetail" component={MenuDetail} />
        </Scene>
      </Router>
    )
  }
}
AppRegistry.registerComponent('LosGorditosPlus', () => LosGorditosPlus);
```
-------------------------------------------------------------------------------------------

<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.5. Desarrollo de la Pantalla de Detalle del Plato</Text>*
<br>
<br>
Esta pantalla será un escena del Router Flux, significa que se sobrepondrá ante el contenido previo cuando sea invocada por lo que volveremos a establecer la barra de navegación y colocar la imagen de fondo.

En esta escena se manejan los siguientes props:

- plato: Variable que contiene la informacion del plato en los atributos img, title, price, rank, descripcion
- plato.img: Direccion de la imagen del plato
- plato.title: Nombre del plato
- plato.price: Precio del plato
- plato.rank: direccion de la imagen respectiva al ranking
- plato.descripcion: Breve informacion del plato

Comenzaremos estableciendo nuestra barra de navegación con un BackButton que nos permita regresar a donde estábamos antes de invocar la escena MenuDetail para esto se utiliza la acción "Actions.pop()" que deshace la ultima actividad hecha con Flux. Al igual que en MenuBar usaremos el componente Image para contener los elementos de la pantalla y colocar al mismo tiempo la imagen de fondo.

```
export default class MenuDetail extends Component {
  render() {
  return (
    <Image style={styles.bg} source={require('./resources/6_BG/bg2.png')} >
      <View style={styles.container_title} >
          <TouchableOpacity style={styles.menu_icon} onPress={() => 
                    Actions.pop()
                  }>
            <Image style={styles.menu_icon} source={require('./resources/1_Icons/recursos-10.png')} />
          </TouchableOpacity>
          <Text style={styles.page_title}>detalle</Text>       
      </View>
    </Image>
  );
}
}
```
Seguimos con el diseño de nuestra pantalla, observamos que tenemos debemos mostrar la descripción del plato de la cual no sabemos su longitud, por tanto, se utilizara el componente ScrollView como contenedor.

- Colocamos el componente <Image> para colocar la imagen del plato.
- Seguido a la imagen hay una barra que contiene el Nombre del plato, su precio, ranking y una imagen del icono, nuevamente estructuramos esta sección del componente utilizando subcontenedores.
- Proseguimos colocando dos botones y finalmente el texto de descripción.

```
import React, { Component } from 'react';
import { View,ScrollView, Text, Image, TouchableOpacity } from 'react-native';
import styles from './styles/MenuDetail_style';
import { Actions } from 'react-native-router-flux';

export default class MenuDetail extends Component {
  render() {
  return (
    <Image style={styles.bg} source={require('./resources/6_BG/bg2.png')} >
      <View style={styles.container_title} >
          <TouchableOpacity style={styles.menu_icon} onPress={() => 
                    Actions.pop()
                  }>
            <Image style={styles.menu_icon} source={require('./resources/1_Icons/recursos-10.png')} />
          </TouchableOpacity>
          <Text style={styles.page_title}>detalle</Text>       
      </View>
      <ScrollView style={styles.containerMenu}>
        <Image style={styles.img} source={this.props.plato.img}/>
        <View style={styles.rowStyle}>
          <View >
            <Text style={styles.title}>{this.props.plato.title}</Text>    
            <Text style={styles.price}>{this.props.plato.price}</Text>     
          </View>
          <View>
            <Image style={styles.img_rank} source={require('./resources/1_Icons/recursos-08.png')}/>  
            <Image style={styles.img_share} source={require('./resources/1_Icons/recursos-28.png')}/>          
          </View> 
        </View>
        <View style={styles.rowStyle}>
          <TouchableOpacity style={styles.bottom_a} onPress={() => 
                    Actions.pop()
                  }>
            <Text style={styles.bottom_a_text}>Cambiar Plato</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.bottom_b}>
            <Text style={styles.bottom_b_text}>Pedir</Text>
          </TouchableOpacity>
        </View>
        <Text style={styles.description}>{this.props.plato.descripcion}</Text>
      </ScrollView>
    </Image>
  );
}
}
```
----------------------------------------------------------------------------------------------
<br>	 
*<Text style="text-decoration: underline; margin: 15px;"> 3.6. Desarrollo de la Pantalla de Información</Text>*
<br>
<br>
En esta pantalla implementaremos un acordeón que contenga la reseña y la lista de las zonas donde se ubica el sitio de comida.

Realizamos nuestra pantalla en el archivo de About.js colocando la imagen seguida del componente Accordion.

```
import React, { Component } from 'react';
import { View,ScrollView, Text, Image, TouchableOpacity } from 'react-native';
import styles from './styles/About_style';
import Accordion from 'react-native-collapsible/Accordion';
import LocationList from './LocationList';


const SECTIONS = [
  {
    title: 'Reseña',
    content: <Text style={styles.content_text}>Gorditos+ cuando un plato no es suficiente</Text>,
  },
  {
    title: 'Ubicación',
    content: <LocationList fake_data={fake_data}/>,
  }
];

export default class About extends Component {

  _renderHeader(section, index, isActive) {
    return (
      <View style={isActive ? styles.header_on : styles.header_off}>
        <Text style={ styles.headerText}>{section.title}</Text>
        <Image style={styles.buttom} source={ isActive ? require('./resources/1_Icons/recursos-11.png') : require('./resources/1_Icons/recursos-12.png')}/>
      </View>
    );
  }
 
  _renderContent(section) {
    return (
      <View style={styles.header_off}>
        {section.content}
      </View>
    );
  }

  render() {
    return (
      <View style={styles.container}>
        <View style={styles.img_container}>
          <Image style={styles.logo} source={require('./resources/3_Logos/menu_logo.png')}/>
        </View>
        <View style={styles.accordion}>
          <Accordion
            underlayColor='white'
            sections={SECTIONS}
            renderHeader={this._renderHeader}
            renderContent={this._renderContent} />
        </View>
      </View>  
    );
  }
}
```

Vemos que en la segunda sección del acordeón utilizamos el componente LocationList cuyo objetivo es renderizar la lista de ubicaciones.

Creamos el archivo LocationList.js

```
touch app/components/LocationList.js
```

Volvemos a utilizar el componente ListView asi que debemos definir en el estado del componente el dataSource con un cloneWithRows del array que contiene la información esto seccionara la información por filas, en este caso el array con información esta contenido en el prop del componente "fake_data".

- Requiere de una función que retorne el componente a pintar en cada fila de la lista (renderRow) al cual se le pasa la información de una fila.

```
import React, { Component } from 'react';
import { View, ListView, ActivityIndicator, Text, Image, TouchableOpacity } from 'react-native';
import styles from './styles/LocationList_style';
import { Actions } from 'react-native-router-flux';

export default class LocationList extends Component {

  constructor(props) {
      super(props);
      var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});

      this.state= {
          dataSource: ds.cloneWithRows(this.props.fake_data)
      };
  }

  changeView(coord, description, contacto) {
      Actions.LocationDetail({coords: coord, dir: description, contact:contacto})
  }

  renderLocation(data){
    return (
      <View style={(data.location==='Carrizal') ? styles.last_container : styles.location_container}>
        <View>
          <Text style={styles.location}>{data.location}</Text>
          <Text style={styles.txt}>{data.mensaje}</Text>
        </View>
        <TouchableOpacity style={styles.img} onPress={() => this.changeView(data.coord, data.dir, data.contacto)}>
          <Image  style={styles.img} source={require('./resources/1_Icons/recursos-32.png')}/>
        </TouchableOpacity>
      </View>
    );
  }

  render() {
    return (
      <ListView
        removeClippedSubviews={false}
        dataSource={this.state.dataSource}
        renderRow={(data) => this.renderLocation(data)}/> 
    );
  }
}
```

Observamos que nuestro componente llama en la función changeView a la escena LocationDetail con los parámetros coords, dir y contact, por tanto, hay que agregarla a nuestro Router.

Creamos el archivo
```
  touch app/components/LocationDetail.js
```

Incorporamos la escena en el router

```
import React, { Component } from 'react';
import { Router, Scene } from 'react-native-router-flux';
import {AppRegistry} from 'react-native';
import MenuBar from './app/components/MenuBar';
import MenuDetail from './app/components/MenuDetail';
import LocationDetail from './app/components/LocationDetail';

export default class LosGorditosPlus extends Component {
  render() {
    return (
      <Router>
        <Scene key="root" hideNavBar>
          <Scene key="MenuBar" component={MenuBar} initial={true} />
          <Scene key="MenuDetail" component={MenuDetail} />
          <Scene key="LocationDetail" component={LocationDetail} />
        </Scene>
      </Router>
    )
  }
}
AppRegistry.registerComponent('LosGorditosPlus', () => LosGorditosPlus);
```


-------------------------------------------------------------------------------------------------
<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.7. Desarrollo de la Pantalla de Ubicación</Text>*
<br>
<br>

Para la pantalla de ubicación se quiere mostrar un mapa que abarque la pantalla en el cual se marquen las sedes del sitio de comida y que estas al ser presionadas invoquen la escena de LocationDetail.

Se trabajara con la variable "fake_data" que contendrá la información de cada sede.

Utilizaremos la librería [React-Native-Maps](https://github.com/lelandrichardson/react-native-maps)

Enceraremos el componente MapView en un View para poder colocar el label que guíe al usuario en la acción de presionar la sede.

```
import React, { Component } from 'react';
import { View, StyleSheet, Text, TouchableOpacity } from 'react-native';
import MapView from 'react-native-maps';
import styles from './styles/Location_style';
import { Actions } from 'react-native-router-flux';

export default class Location extends Component {
  constructor(props){
      super(props);
      this.state={
        region: {
                latitude: 10.498086655450642,
                  longitude: -66.85348734185897,
                  latitudeDelta: 0.70,
                  longitudeDelta: 0.70,
              }
      }
  }

  changeView(coord, description, contacto) {
      Actions.LocationDetail({coords: coord, dir: description, contact:contacto})
  }

  render() {
  return (
    <View style ={styles.container}>
        <MapView
          style={styles.map}
          region={this.state.region}
          onRegionChange={(region)=> this.setState({region})} >
            <MapView.Marker
               coordinate={fake_data0[0].coord}
               image={require('./resources/1_Icons/recursos-33.png')}
               onPress={() => this.changeView(fake_data0[0].coord, fake_data0[0].dir, fake_data0[0].contacto)}/>
            <MapView.Marker
               coordinate={fake_data0[1].coord}
               image={require('./resources/1_Icons/recursos-33.png')}
               onPress={() => this.changeView(fake_data0[1].coord, fake_data0[1].dir, fake_data0[1].contacto)}/>
            <MapView.Marker
               coordinate={fake_data0[2].coord}
               image={require('./resources/1_Icons/recursos-33.png')}
               onPress={() => this.changeView(fake_data0[2].coord, fake_data0[2].dir, fake_data0[2].contacto)}/>
        </MapView>
      <View style={styles.label}>
        <Text style={styles.text}>Seleccione un Establecimiento</Text>
      </View>
    </View>
  );
}
}
```

Como declaramos la escena en el punto anterior no es necesario modificar el Router

----------------------------------------------------------------------------

<br> 
*<Text style="text-decoration: underline; margin: 15px;"> 3.8. Desarrollo de la Pantalla de Detalle de Ubicación</Text>*
<br>
<br>
Elaboraremos la escena para el Detalle de Ubicaciones donde se desea mostrar un pequeño mapa que muestre la ubicación de la sede seleccionada seguido de su dirección e información de contacto.

Recibe los siguientes parámetros al ser invocada:

- coords: Variable con los atributos latitude, longitude.
- coords.latitude: Valor de la latitud.
- coords.longitude: Valor de la longitud.
- contact: Variable con los atributos gerente, móvil, fijo.
- contact.gerente: Valor del Nombre del gerente.
- contact.movil: Valor del numero del teléfono móvil de la sede.
- contact.fijo: Valor del numero de teléfono de la sede.

Nuevamente, al ser una escena, tendremos que definir la barra de navegación como hicimos en la escena MenuDetail con un BackButton que nos permita regresar a donde estábamos antes de invocar la escena MenuDetail para esto se utiliza la acción "Actions.pop()" que deshace la ultima actividad hecha con Flux. Al igual que en MenuBar usaremos el componente Image para contener los elementos de la pantalla y colocar al mismo tiempo la imagen de fondo.

```
import React, { Component } from 'react';
import { View,ScrollView, Text, Image, TouchableOpacity } from 'react-native';
import styles from './styles/LocationDetail_Style';
import { Actions } from 'react-native-router-flux';
import MapView from 'react-native-maps';

export default class LocationDetail extends Component {

  constructor(props){
    super(props);
    this.state={
      region: {
        latitude: this.props.coords.latitude,
        longitude: this.props.coords.longitude,
        latitudeDelta: 0.0015,
        longitudeDelta: 0.0015,
      }
    }
  }

  render() {
  return (
    <Image style={styles.bg} source={require('./resources/6_BG/bg2.png')} >
      <View style={styles.container_title} >
          <TouchableOpacity style={styles.menu_icon} onPress={() => 
                    Actions.pop()
                  }>
            <Image style={styles.menu_icon} source={require('./resources/1_Icons/recursos-10.png')} />
          </TouchableOpacity>
          <Text style={styles.page_title}>como llegar</Text>       
      </View>
      
      <View style ={styles.container}>
        <MapView
          style={styles.map}
          region={this.state.region}
          onRegionChange={(region)=> this.setState({region})} >
          <MapView.Marker
              coordinate={this.props.coords}
              image={require('./resources/1_Icons/recursos-33.png')}/>
        </MapView>
      </View>
      <View style={styles.inf_container}>
        <Text style={styles.text_title}>Dirección: </Text>
        <Text style={styles.text}>{this.props.dir} </Text>
      </View>
      <View style={styles.inf_container}>
        <Text style={styles.text_title}>Información de Contacto: </Text>
        <View style={styles.row}>
          <Text style={styles.text_subtitle}>Gerente: </Text>
          <Text style={styles.text}>{this.props.contact.gerente}</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.text_subtitle}>Oficina: </Text>
          <Text style={styles.text}>{this.props.contact.fijo} </Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.text_subtitle}>Móvil: </Text>
          <Text style={styles.text}>{this.props.contact.movil} </Text>
        </View>
      </View>
    </Image>
  );
}
}
```
----------------------------------------------------------------------------

<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.9. Desarrollo de la Pantalla de Contacto</Text>*
<br>
<br>

La elaboración de esta pantalla se basa en mostrar un acordeón de con dos cabeceras que muestren la información de contacto de la sede principal (primera cabecera) y de una sede seleccionada (segunda cabecera).

Primero, trabajaremos en el contenido del acordeón que se basa en mostrar la información de contacto y habilitar un botón que al ser presionado invoque el formulario para enviar un mensaje.

Creamos el archivo Contact_container.js

```
  touch app/components/Contact_container.js
```

El componente contiene los siguientes props al ser instanciado:

- gerente: Nombre del Gerente
- movil: Número de teléfono móvil
- fijo: Número de teléfono de la oficina

Elaboramos el diseño del componente, un contenedor que engloba los textos a mostrar y un botón que al ser presionado llame a la función changeView que invoca la escena ContactForm.

```
import React, { Component } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import styles from './styles/CC_style';
import { Actions } from 'react-native-router-flux';

export default class Contact_container extends Component {
  changeView (infor) {
      Actions.ContactForm({info: infor})
  }
  
  render() {
  return (      
      <View style={styles.inf_container}>
        <View style={styles.row}>
          <Text style={styles.text_subtitle}>Gerente: </Text>
          <Text style={styles.text}>{this.props.gerente}</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.text_subtitle}>Oficina: </Text>
          <Text style={styles.text}>{this.props.fijo} </Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.text_subtitle}>Móvil: </Text>
          <Text style={styles.text}>{this.props.movil} </Text>
        </View>
        <TouchableOpacity style={styles.bottom_b} onPress={() => this.changeView('props')}>
          <Text style={styles.bottom_b_text}>Contactar</Text>
        </TouchableOpacity>
      </View>
  );
}
}
```

Estamos invocando a la escena ContactForm que aun no ha sido definida por lo que procemos a crear el archivo ContatForm.js

```
  touch ContactForm.js
```

E incorporamos la escena en el Router

```
import React, { Component } from 'react';
import { Router, Scene } from 'react-native-router-flux';
import {AppRegistry} from 'react-native';
import MenuBar from './app/components/MenuBar';
import MenuDetail from './app/components/MenuDetail';
import LocationDetail from './app/components/LocationDetail';
import ContactForm from './app/components/ContactForm';

export default class LosGorditosPlus extends Component {
  render() {
    return (
      <Router>
        <Scene key="root" hideNavBar>
          <Scene key="MenuBar" component={MenuBar} initial={true} />
          <Scene key="MenuDetail" component={MenuDetail} />
          <Scene key="LocationDetail" component={LocationDetail} />
          <Scene key="ContactForm" component={ContactForm}>
        </Scene>
      </Router>
    )
  }
}
AppRegistry.registerComponent('LosGorditosPlus', () => LosGorditosPlus);
```

Regresamos a nuestra pantalla de contacto e importamos el componente

```
import Contact_container from './app/components/Contact_container';
```

Ahora trabajaremos en la selección de la sede en la segunda cabecera, definiremos en el estado de nuestra clase los siguientes atributos:

- title: Titulo de la sede que se muestra en el header del componente Accordion.
- selected: Número de la sede seleccionada, se utiliza para setear la posición del array fake_data.
- show: Controla el contenido a mostrar cuando se abra la cabecera del acordeón en la selección de la sede.

De esta manera pasaremos como titulo de la cabecera el valor del estado "title" así le indicaremos al usuario la sede seleccionada, además, se le definirá la función onPress para que al presionar el texto en la cabecera cambie el contenido de esta cambiando el valor del atributo "show". Para la selección de la sede utilizaremos el componente Text mostrando el nombre de la zona en la que están ubicadas y cuando sea presionado actualizaremos los atributos del estado y se mostrara el componente Contact_container con la respectiva información.

Declaramos nuestra variable SECTIONS con el contenido a ser pasado al componente Accordion, se tendrá una variable fake_data que contendrá la información de contacto.

```
const SECTIONS = [
  {
    title:  <Text style={ styles.headerText}>General</Text>,
    content: <Contact_container gerente={fake_data[0].gerente} fijo={fake_data[0].fijo} movil={fake_data[0].movil}/>,
  },
  {
    title: <TouchableOpacity onPress={()=> {
              this.setState({show: false})
            }}>
              <Text style={ styles.headerText}>{this.state.title}</Text>
            </TouchableOpacity>,
    content: this.state.show ? 
      <Contact_container gerente={fake_data[this.state.selected].gerente} fijo={fake_data[this.state.selected].fijo} movil={fake_data[this.state.selected].movil}/> 
      : 
      <View>
        <TouchableOpacity onPress={()=>{
          this.setState({title: 'Altamira', selected: 0, show: true})
          }}>
          <Text style={styles.text}>{fake_data[0].location}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={()=>{
          this.setState({title: 'Carrizal', selected: 2, show: true}) 
          }}>
          <Text style={styles.text}>{fake_data[2].location}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={()=>{
          this.setState({title: 'La Castellana', selected: 1, show: true}) 
          }}>
          <Text style={styles.text}>{fake_data[1].location}</Text>
        </TouchableOpacity>          
      </View>,
  },
];
```

Como nuestra variable SECTIONS utiliza los estados de la clase esta debe ser definida dentro del render de la clase.


```
import React, { Component } from 'react';
import { View,ScrollView, Text, Image, TouchableOpacity } from 'react-native';
import styles from './styles/Contact_style';
import Accordion from 'react-native-collapsible/Accordion';
import Contact_container from './Contact_container';

export default class Contact extends Component {
  constructor(props) {
    super(props);
    this.state = {
      title: 'Selección de Sede',
      selected: 0,
      show: false
    };
  }

  _renderHeader(section, index, isActive) {
    return (
      <View style={isActive ? styles.header_on : styles.header_off}>
        {section.title}
        <Image style={styles.buttom} source={ isActive ? require('./resources/1_Icons/recursos-11.png') : require('./resources/1_Icons/recursos-12.png')}/>
      </View>
    );
  }

  _renderContent(section) {
    return (
      <View style={styles.header_off}>
        {section.content}
      </View>
    );
  }

  render() {
    const SECTIONS = [
      ...
    ];

    return (
      <View style={styles.container}>
        <View style={styles.accordion}>
          <Accordion
            underlayColor='white'
            sections={SECTIONS}
            renderHeader={this._renderHeader}
            renderContent={this._renderContent} />          
        </View>
      </View>  
    );
  }
}
```
----------------------------------------------------------------------------

<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.10. Desarrollo de la Pantalla para Contactar</Text>*
<br>
<br>

Finalmente, elaboramos la ultima escena de nuestra aplicación ContactForm.

Consta de un formulario donde indicaremos al usuario que coloque su Nombre, email y el cuerpo del mensaje.

Para permitir al usuario insertar texto utilizaremos el componente TextInput el cual requiere de la declaración de los atributos en el estado de clase a ser mostrados para actualizar el contenido insertado.

Al ser una escena, tendremos que definir la barra de navegación como hicimos en la escena MenuDetail con un BackButton que nos permita regresar a donde estábamos antes de invocar la escena MenuDetail para esto se utiliza la acción "Actions.pop()" que deshace la ultima actividad hecha con Flux. Al igual que en MenuBar usaremos el componente Image para contener los elementos de la pantalla y colocar al mismo tiempo la imagen de fondo.

```
import React, { Component } from 'react';
import { View, Text, Image, TextInput, TouchableOpacity } from 'react-native';
import styles from './styles/ContactForm_style';
import { Actions } from 'react-native-router-flux';

export default class ContactForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      nombre: 'Nombre',
      email: 'email',
      mensaje: 'Mensaje ...'
    };
  }

  render() {
  return (      
   <Image style={styles.bg} source={require('./resources/6_BG/bg2.png')} >
      <View style={styles.container_title} >
          <TouchableOpacity style={styles.menu_icon} onPress={() =>
              Actions.pop()
          }>
            <Image style={styles.menu_icon} source={require('./resources/1_Icons/recursos-10.png')} />
          </TouchableOpacity>
          <Text style={styles.page_title}>contactar</Text>       
      </View>
      
      <View style ={styles.container}> 
        <View style={styles.label}>
          <TextInput maxLength = {60}
            style={styles.text_input_a}
            onChangeText={(nombre) => this.setState({nombre})} 
            value={ this.state.nombre }/>
        </View>

        <View style={styles.label}>
         <TextInput maxLength = {60}
          keyboardType="email-address"
          style={styles.text_input_a} 
          onChangeText={(email) => this.setState({email})} 
          value={this.state.email}/>
        </View>

        <View style={styles.label_b}>
          <TextInput 
            multiline = {true}
            maxLength = {300}
            style={styles.text_input_b} 
            onChangeText={(mensaje) => this.setState({mensaje})} 
            value={this.state.mensaje}/>
        </View>

        <TouchableOpacity style={styles.bottom_b} onPress={()=> {
          this.setState({nombre: 'Nombre', email: 'email', mensaje: 'Mensaje ...'});
          alert('Mensaje Enviado')}}>
          <Text style={styles.bottom_b_text}>Enviar</Text>
        </TouchableOpacity>

      </View>

    </Image>
  );
}
}
```
----------------------------------------------------------------------------

<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.11. Desarrollo del Splash para el inicio de la aplicación</Text>*
<br>
<br>

Una vez instalada y configurada nuestra librería procedemos a importar el Splash en el index de la aplicación.

```
import SplashScreen from '@remobile/react-native-splashscreen';
```

Trabajaremos con la función componentDidMount para indicar cuando ocultar el Splash, esta es una función por defecto de reactnative que se ejecuta cuando se finaliza el renderizado del componente, utilizando el método hide() del SplashScreen.

```
export default class LosGorditosPlus extends Component {
  
  componentDidMount () {
    SplashScreen.hide()
  }
  
  render() {
  ...
```


----------------------------------------------------------------------------

<br>
*<Text style="text-decoration: underline; margin: 15px;"> 3.12. Instalación en el dispositivo</Text>*
<br>
<br>	 
----------------------------------------------------------------------------
	  

	 
